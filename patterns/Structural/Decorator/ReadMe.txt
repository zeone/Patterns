Декоратор позволяет изменить(добавить) поведение для объекта
В данном примере например у нас может быть какоето ограничение на количество запросов, для того что бы это контролировать мы обернули декоратором базовый класс,
и добавили дополнительную логику.

Для этого мы сделали следующее:
1. создали абстрактный класс декоратора который наследуется от того же интерфейса что и базовый класс. Методы интерфейса обьявили как абстрактные( для того что бы реализовать их в наследниках)
2. объявили конструктор который будет принимать интерфейс базового класса
3. создали конкретный декоратор и реализовали абстрактные методы. при этом добавили логику проверки на количество запросов

Таким образом без изменения базового класса, мы добавили дополнительну проверку, при этом клиет будет работать так как и прежде поскольку тип интерфейса не изменился

В результате мы получили тот же объект но с доп логикой


Можно было бы реализовать просто наследованием, но тогда мы бы получили жесткую привязку к наследуемому типу. 
Декоратор позволяет позволяет использовать любую реализвцию ILogSaver. Декорация позволяет добавлять поведение во время искольнения, а не только при компиляции.

При сложномсождании можно использовать DI или фабрику (LogSaverFactory)


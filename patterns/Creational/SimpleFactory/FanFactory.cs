namespace patterns.Creational.SimpleFactory
{
    /// <summary>
    /// Суть простой фабрики в том что если создание объекта сложное,
    /// либо нужна преинициализация, либо мы возвращаем разные обьекты но все приведенные к одному интерфейсу
    /// то создаеться промежуточный класс(фабрика) в котором определяеться метод принимающий необходимые аргументы.
    /// внутри фабрики мы создаем и производим необходимые операции над объектом и возвращаем его
    /// какие вопросы решает
    /// например, если бы у нас был 1 вентилятор, то мы бы могли просто вызвать конструктор new Fan(); но если добавляються типы вантиляторов
    /// то конструктор будет усложняться new Fan(enineType, fanType) и т.д.. Класс Fan и его конструктор будут все более громоздкими.
    /// выход в даном случае фабрика. ДЛя разных типов вентиляторов у нас создаються разные классы(объекы). При том все они имеют общий функционал
    /// по этому лдя всех типов вентиляторов мы используем 1 интерфейс, а в фабриве создает метод который будет принимать тип вентилятора, и возвращать нам нужный
    /// кроме того если над объектами нужно провести какието дополнительные операции инициализации, то это мы можем сделать в фабрике и вернуть уже готовый для работы объект
    /// </summary>
    public class FanFactory : IFanFactory
    {
        public IFan CreateFan(FanType type)
        {
            switch (type)
            {
                case FanType.CeilingFan:
                    return new CeilingFan();
                case FanType.ExhaustFan:
                    return new ExhaustFan();
                default:
                    return new TableFan();
            }
        }
    }
}
